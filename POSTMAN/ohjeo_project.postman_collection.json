{
	"info": {
		"_postman_id": "2442b93f-774f-4a9b-b426-1bdf98d76752",
		"name": "portfolio-project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30168697"
	},
	"item": [
		{
			"name": "load",
			"item": [
				{
					"name": "Non-User",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "before create boat 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 Create Load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Set appropriate environment variable for load id",
													"pm.environment.set(\"load_id_none\", pm.response.json()[\"id\"]);",
													"",
													"pm.test(\"201 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
													"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
													"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 5,\n  \"item\": \"LEGO Blocks\",\n  \"creation_date\": \"10/18/2021\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								},
								{
									"name": "after create boat 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
													"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
													"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 Missed Attributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"400 status code\", function () {",
													"   pm.response.to.have.status(400);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 5,\n  //\"item\": \"LEGO Blocks\",\n  \"creation_date\": \"10/18/2021\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 Accept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(406);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 5,\n  \"item\": \"LEGO Blocks\",\n  \"creation_date\": \"10/18/2021\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "read",
							"item": [
								{
									"name": "200 pages",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 pages Accept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"   //Check if status code is 406",
													"   pm.response.to.have.status(406);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 get load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
													"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
													"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 invalid load id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{invalid_load_id}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{invalid_load_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 get boat Accept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(406);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "update",
							"item": [
								{
									"name": "200 get load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
													"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
													"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "303 put load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"303 status code\", function () {",
													"    pm.response.to.have.status(303);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 20,\n  \"item\": \"LEGO\",\n  \"creation_date\": \"10/10/2019\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "after put 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(20);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/10/2019\");",
													"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
													"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 missed attributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"400 status code\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 20,\n  \"creation_date\": \"10/10/2019\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 invalid load id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 20,\n  \"item\": \"LEGO\",\n  \"creation_date\": \"10/10/2019\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{invalid_load_id}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{invalid_load_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 Accept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"    pm.response.to.have.status(406);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 20,\n  \"item\": \"LEGO\",\n  \"creation_date\": \"10/10/2019\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "303 patch load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"303 status code\", function () {",
													"    pm.response.to.have.status(303);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 120,\n  \"creation_date\": \"10/10/2018\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "after patch 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(120);",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/10/2018\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 invalid load id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"volume\": \"string\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{invalid_load_id}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{invalid_load_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 Accept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"    pm.response.to.have.status(406);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"volume\": 50\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "204 Delete Load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"204 status code\", function () {",
													"    //Check for status code 204",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "after delete load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(404);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 invalid load id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    //Check for status code 404",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads/{{invalid_load_id}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{invalid_load_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "create for user1",
							"item": [
								{
									"name": "before create boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 Create Load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Set appropriate environment variable for load id",
													"pm.environment.set(\"load_id_user\", pm.response.json()[\"id\"]);",
													"",
													"pm.test(\"201 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
													"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
													"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 5,\n  \"item\": \"LEGO Blocks\",\n  \"creation_date\": \"10/18/2021\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								},
								{
									"name": "after create boat 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
													"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
													"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 Missed Attributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"400 status code\", function () {",
													"   pm.response.to.have.status(400);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 5,\n  //\"item\": \"LEGO Blocks\",\n  \"creation_date\": \"10/18/2021\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 invalid JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{invalid_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 5,\n  \"item\": \"LEGO Blocks\",\n  \"creation_date\": \"10/18/2021\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 missing JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"201 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{none-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 5,\n  \"item\": \"LEGO Blocks\",\n  \"creation_date\": \"10/18/2021\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 Create Load for User (Accept)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(406);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 5,\n  \"item\": \"LEGO Blocks\",\n  \"creation_date\": \"10/18/2021\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "create for user2",
							"item": [
								{
									"name": "201 Create Load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Set appropriate environment variable for load id",
													"pm.environment.set(\"load_id_user2\", pm.response.json()[\"id\"]);",
													"",
													"pm.test(\"201 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
													"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
													"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 5,\n  \"item\": \"LEGO Blocks\",\n  \"creation_date\": \"10/18/2021\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "read for user1",
							"item": [
								{
									"name": "200 pages",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 200",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 pages invalid JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"   //Check if status code is 401",
													"   pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{invalid_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 pages Accept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"   //Check if status code is 406",
													"   pm.response.to.have.status(406);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 get load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"    //Check if status code is 200",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check if the content is valid and has proper self url",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
													"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
													"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 invalid JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"    //Check if status code is 200",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check if the content is valid and has proper self url",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(50);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"mao 20\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"09/10/2015\");",
													"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
													"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{invalid_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 missing JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    //Check if status code is 200",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{none-token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 invalid load id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    //Check if status code is 200",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads/{{invalid_load_id}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{invalid_load_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 Accept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"    //Check if status code is 200",
													"    pm.response.to.have.status(406);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "user2 read data for user1",
							"item": [
								{
									"name": "404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"   //Check if status code is 200",
													"   pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "update for user1",
							"item": [
								{
									"name": "before put",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
													"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
													"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "303 load for User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"303 status code\", function () {",
													"    pm.response.to.have.status(303);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 20,\n  \"item\": \"LEGO\",\n  \"creation_date\": \"10/10/2019\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "after put 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(20);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/10/2019\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 missed Attributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"400 status code\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 20,\n  \"item\": \"LEGO\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 invalid JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{invalid_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 20,\n  \"item\": \"LEGO\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 missing JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{none-token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 20,\n  \"item\": \"LEGO\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 invalid load id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 20,\n  \"item\": \"LEGO\",\n  \"creation_date\": \"10/10/2019\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{invalid_load_id}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{invalid_load_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 Accept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"    pm.response.to.have.status(406);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 20,\n  \"item\": \"LEGO\",\n  \"creation_date\": \"10/10/2019\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "before patch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(20);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/10/2019\");",
													"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
													"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "303 load for User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"303 status code\", function () {",
													"    pm.response.to.have.status(303);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 50,\n  \"creation_date\": \"09/10/2015\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "after put 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(50);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"09/10/2015\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 invalid attributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"400 status code\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": \"string\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 invalid JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{invalid_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": \"string\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 missing JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{none-token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": \"string\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 invalid load id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 50,\n  \"creation_date\": \"09/10/2015\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{invalid_load_id}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{invalid_load_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 load for User (invalid Accept)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"    pm.response.to.have.status(406);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 53\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "user2 update data for user1",
							"item": [
								{
									"name": "404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 20,\n  \"item\": \"LEGO\",\n  \"creation_date\": \"10/10/2019\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete for user1",
							"item": [
								{
									"name": "before delete load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(50);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"09/10/2015\");",
													"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
													"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "204 delete load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"204 status code\", function () {",
													"    //Check for status code 204",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "after delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    //Check for status code 401",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{invalid_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 missing token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    //Check for status code 401",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{none-token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 invalid load id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    //Check for status code 404",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads/{{invalid_load_id}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{invalid_load_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "user2 delete data for user1",
							"item": [
								{
									"name": "404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    //Check for status code 404",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "405 Wrong method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {",
									"    pm.response.to.have.status(405);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{wallace_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"volume\": 53\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/loads/{{load_id_user}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{load_id_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "405 Wrong method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {",
									"    pm.response.to.have.status(405);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{wallace_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"volume\": 53\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/loads",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Boat",
			"item": [
				{
					"name": "Non-User",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "200 pages for All boats",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"boat_id_none\", pm.response.json()[\"id\"]);",
													"",
													"pm.test(\"201 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"length\"]).to.eq(52);",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk Oh\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Computer Science\");",
													"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk Oh\",\n    \"type\": \"Computer Science\",\n    \"length\" : 52\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "After Create Boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"length\"]).to.eq(52);",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk Oh\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Computer Science\");",
													"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 missing attributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"400 status code\", function () {",
													"   //Check if status code is 400",
													"   pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk Oh\",\n    \"length\" : 52\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 Accept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(406);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk Oh\",\n    \"type\": \"Computer Science\",\n    \"length\" : 52\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "read",
							"item": [
								{
									"name": "200 pages for Non-User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Boat for Non-User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"boat_id_none\", pm.response.json()[\"id\"]);",
													"",
													"pm.test(\"201 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"length\"]).to.eq(52);",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk Oh\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Computer Science\");",
													"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk Oh\",\n    \"type\": \"Computer Science\",\n    \"length\" : 52\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "See Boat Just Created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"length\"]).to.eq(52);",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk Oh\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Computer Science\");",
													"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 invalid boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"   pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{invalid_boat_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 Accept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"   pm.response.to.have.status(406);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "update",
							"item": [
								{
									"name": "303 put",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"303 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(303);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"length\"]).to.eq(15);",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Computer\");",
													"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk\",\n    \"type\": \"Computer\",\n    \"length\" : 15\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "after put",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"length\"]).to.eq(15);",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Computer\");",
													"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 missed attributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"400 status code\", function () {",
													"   pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk\",\n    \"length\" : 15\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 invalid_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"   pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk\",\n    \"length\" : 15\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{invalid_boat_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 Accept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(406);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk\",\n    \"type\": \"Computer\",\n    \"length\" : 15\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "303 partial Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"303 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(303);",
													"});",
													"",
													"pm.test(\"content is valid\", function () {",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Computer\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk\",\n    \"type\": \"Computer\"\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "after patch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"content is valid\", function () {",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Computer\");",
													"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 partial Update Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"   //Check if status code is 404",
													"   pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk\",\n    \"type\": \"Computer\"\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{invalid_boat_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 partial Update Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"   //Check if status code is 404",
													"   pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk\",\n    \"type\": \"Computer\"\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "200 before delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "204 delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"204 status code\", function () {",
													"   //Check if status code is 401",
													"   pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "After delete 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"   //Check if status code is 404",
													"   pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "create for user1",
							"item": [
								{
									"name": "Create Boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"boat_id_user\", pm.response.json()[\"id\"]);",
													"",
													"pm.test(\"201 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"length\"]).to.eq(52);",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk Oh\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"cs\");",
													"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk Oh\",\n    \"type\": \"cs\",\n    \"length\" : 52\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "After Create Boat for user2 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"length\"]).to.eq(52);",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk Oh\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"cs\");",
													"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 missing attributes Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"400 status code\", function () {",
													"   //Check if status code is 400",
													"   pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk Oh\",\n    \"length\" : 52\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 invalid JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{invalid_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk Oh\",\n    \"type\": \"Computer Science\",\n    \"length\" : 52\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 missing JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{none-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk Oh\",\n    \"type\": \"Computer Science\",\n    \"length\" : 52\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 Accept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(406);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk Oh\",\n    \"type\": \"Computer Science\",\n    \"length\" : 52\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "create for user2",
							"item": [
								{
									"name": "200 pages for user2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Boat for user2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"boat_id_user2\", pm.response.json()[\"id\"]);",
													"",
													"pm.test(\"201 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"length\"]).to.eq(52);",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk Oh\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Computer Science\");",
													"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk Oh\",\n    \"type\": \"Computer Science\",\n    \"length\" : 52\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "After Create Boat for user2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"length\"]).to.eq(52);",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk Oh\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Computer Science\");",
													"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user2}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user2}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "read for user1",
							"item": [
								{
									"name": "200 pages for user1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 pages Accept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"   pm.response.to.have.status(406);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Boat for user1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"boat_id_user\", pm.response.json()[\"id\"]);",
													"",
													"pm.test(\"201 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"length\"]).to.eq(52);",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk Oh\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Computer Science\");",
													"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk Oh\",\n    \"type\": \"Computer Science\",\n    \"length\" : 52\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "After Create Boat for user1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"length\"]).to.eq(52);",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk Oh\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Computer Science\");",
													"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 invalid Boat id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{invalid_boat_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 invalid JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{invalid_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 missing JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{none-token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 Accept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(406);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "user2 read data for user1",
							"item": [
								{
									"name": "404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"   pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "update for user1",
							"item": [
								{
									"name": "303 put for user1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"boat_id_user\", pm.response.json()[\"id\"]);",
													"",
													"pm.test(\"303 status code\", function () {",
													"    pm.response.to.have.status(303);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Location",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"asdf\",\r\n  \"type\": \"fdsa\",\r\n  \"length\": 10\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "After put 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"length\"]).to.eq(10);",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"asdf\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"fdsa\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Location",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 invalid Attributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"400 status code\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Location",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"asdf\",\r\n  \"length\": 10\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 invalid JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{invalid_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Location",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"fld\",\r\n  \"type\": \"Metapong\",\r\n  \"length\": 50\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 missing JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{none-token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Location",
												"value": "",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"fld\",\r\n  \"type\": \"Metapong\",\r\n  \"length\": 50\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 invalid boat id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Location",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"fld\",\r\n  \"type\": \"Metapong\",\r\n  \"length\": 50\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{invalid_boat_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 Accept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"303 status code\", function () {",
													"    pm.response.to.have.status(406);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"asdf\",\r\n  \"type\": \"fdsa\",\r\n  \"length\": 10\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "303 patch for user1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"303 status code\", function () {",
													"    pm.response.to.have.status(303);",
													"});",
													"",
													"pm.test(\"content is valid\", function () {",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Edited\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Edited\"\r\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "After patch 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"content is valid\", function () {",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Edited\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 invalid Attributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"400 status code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": 52\r\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 invalid JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{invalid_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"fdsa\"\r\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 Missing JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{none-token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"fdsa\"\r\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 invalid boat id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Edited\"\r\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{invalid_boat_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "406 Accept",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"406 status code\", function () {",
													"    pm.response.to.have.status(406);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"asdf\",\r\n  \"type\": \"fdsa\",\r\n  \"length\": 10\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "user2 update data for user1",
							"item": [
								{
									"name": "404 put",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Location",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"asdf\",\r\n  \"type\": \"fdsa\",\r\n  \"length\": 10\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 patch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Edited\"\r\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete for user1",
							"item": [
								{
									"name": "before delete boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 status code\", function () {",
													"   //Check if status code is 204",
													"   pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "204 delete boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"204 status code\", function () {",
													"   //Check if status code is 204",
													"   pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "after delete boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"   //Check if status code is 204",
													"   pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"   //Check if status code is 204",
													"   pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{invalid_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "text/html",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 missing token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"   //Check if status code is 204",
													"   pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{none-token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 invalid boat id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"   //Check if status code is 204",
													"   pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{invalid_boat_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "user2 delete data for user1",
							"item": [
								{
									"name": "404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"   //Check if status code is 204",
													"   pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "405 Wrong method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {",
									"    pm.response.to.have.status(405);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{wallace_token_1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"volume\": 53\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id_user}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "405 Wrong path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {",
									"   //Check if status code is 201",
									"   pm.response.to.have.status(405);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{wallace_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jeongmuk Oh\",\n    \"type\": \"Computer Science\",\n    \"length\" : 52\n}"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "405 Wrong method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {",
									"    pm.response.to.have.status(405);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{wallace_token_1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"volume\": 53\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/loads",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Relationships",
			"item": [
				{
					"name": "assign load to boat",
					"item": [
						{
							"name": "Non-User",
							"item": [
								{
									"name": "Create Load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Set appropriate environment variable for load id",
													"pm.environment.set(\"load_id_none\", pm.response.json()[\"id\"]);",
													"",
													"pm.test(\"201 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
													"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
													"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 5,\n  \"item\": \"LEGO Blocks\",\n  \"creation_date\": \"10/18/2021\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"boat_id_none\", pm.response.json()[\"id\"]);",
													"",
													"pm.test(\"201 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"length\"]).to.eq(52);",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk Oh\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Computer Science\");",
													"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk Oh\",\n    \"type\": \"Computer Science\",\n    \"length\" : 52\n}"
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "204 assign load to boat for Non-User 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"204 status code\", function () {",
													"    //Check for status code 204",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}",
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "403 after assigned",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"403 status code\", function () {",
													"    //Check for status code 403",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}",
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 invalid JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    //Check for status code 204",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{invalid_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}",
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 missing JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    //Check for status code 204",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{none-token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}",
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 assigned Invalid load to Valid boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    //Check for status code 404",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}",
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 assign Valid load to Invalid boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    //Check for status code 404",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}",
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User",
							"item": [
								{
									"name": "Create Boat for user1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"boat_id_user\", pm.response.json()[\"id\"]);",
													"",
													"pm.test(\"201 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"length\"]).to.eq(52);",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk Oh\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"cs\");",
													"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk Oh\",\n    \"type\": \"cs\",\n    \"length\" : 52\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Boat for user2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"boat_id_user2\", pm.response.json()[\"id\"]);",
													"",
													"pm.test(\"201 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"length\"]).to.eq(52);",
													"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Jeongmuk Oh\");",
													"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"cs\");",
													"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Jeongmuk Oh\",\n    \"type\": \"cs\",\n    \"length\" : 52\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/boats",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Load for user1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"load_id_user\", pm.response.json()[\"id\"]);",
													"",
													"pm.test(\"201 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
													"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
													"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 5,\n  \"item\": \"LEGO Blocks\",\n  \"creation_date\": \"10/18/2021\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Load for user2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Set appropriate environment variable for load id",
													"pm.environment.set(\"load_id_user2\", pm.response.json()[\"id\"]);",
													"",
													"pm.test(\"201 status code\", function () {",
													"   //Check if status code is 201",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"content is valid\", function () {",
													"    //Check for appropriate content including self value",
													"    pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
													"    pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");",
													"    pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
													"    pm.expect(pm.response.json()[\"carrier\"]).to.equal(null);",
													"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
													"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"volume\": 5,\n  \"item\": \"LEGO Blocks\",\n  \"creation_date\": \"10/18/2021\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{app_url}}/loads",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"loads"
											]
										}
									},
									"response": []
								},
								{
									"name": "204 assign load to boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"204 status code\", function () {",
													"    //Check for status code 204",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}",
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "403 after assigned",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"403 status code\", function () {",
													"    //Check for status code 403",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}",
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 invalid JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    //Check for status code 204",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{invalid_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}",
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 missing JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    //Check for status code 204",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{none-token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}",
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 assign Invalid load to Valid boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    //Check for status code 404",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}",
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "boat for user1 and load for user2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    //Check for status code 404",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}/loads/{{load_id_user2}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}",
												"loads",
												"{{load_id_user2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "boat for user2 and load for user1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    //Check for status code 404",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user2}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user2}}",
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "unassign load from boat",
					"item": [
						{
							"name": "Non-User",
							"item": [
								{
									"name": "204",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"204 status code\", function () {",
													"    //Check for status code 204",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}",
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "403 already unassigned",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"403 status code\", function () {",
													"    //Check for status code 204",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}",
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 unassign Invalid load from Valid boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    //Check for status code 204",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}",
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 unassign Valid load from Invalid boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    //Check for status code 404",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}",
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User",
							"item": [
								{
									"name": "204",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"204 status code\", function () {",
													"    //Check for status code 204",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}",
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 already unassigned",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    //Check for status code 204",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}",
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 invalid JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    //Check for status code 204",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{invalid_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}",
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 missing JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"401 status code\", function () {",
													"    //Check for status code 204",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{none-token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}",
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 unassign Invalid load from Valid boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    //Check for status code 404",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_none}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_none}}",
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 unassign Valid load from Invalid Boat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    //Check for status code 404",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}/loads/{{load_id_none}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}",
												"loads",
												"{{load_id_none}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "boat for user1 and load for user 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    //Check for status code 404",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user}}/loads/{{load_id_user2}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user}}",
												"loads",
												"{{load_id_user2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "boat for user2 and load for user1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"404 status code\", function () {",
													"    //Check for status code 404",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{wallace_token_1}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{app_url}}/boats/{{boat_id_user2}}/loads/{{load_id_user}}",
											"host": [
												"{{app_url}}"
											],
											"path": [
												"boats",
												"{{boat_id_user2}}",
												"loads",
												"{{load_id_user}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "200 Get User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{wallace_token_1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/myaccount",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"myaccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 user list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/users",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}